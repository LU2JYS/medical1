#함수선언 def()
#함수호출 이름()
#함수선언 def 이름(메게변수) > 이름(매게변수)
#리턴 개수하곤 상관이 없다. 개수는 맞춰야 함
#함수내의 변수는 지역변수여서, 함수가 종료되면 사라짐.
#함수내의 변경된 변수값을 전역변수값을  반영하고 싶으면 리턴값으로 돌려줘야함
# 함수내 global 이라고하면 , 전역변수에 선언되어 있는 변수주소를 가져옴( 될수있으면 global은 쓰지말아라)
# 매개변수 딕셔너리,리스트 사용 경우 리턴 할 필요가 없음.


def cal(v1):
    return 100
num1=cal(100) #앞에 리턴의개수가 맞아야 정답이 나온다.
print(num1)


print("-"*50)


#중요>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>개념을 잘 이해하자
def cal(v1):#지역변수
    v1=200
    return v1
v1=100 #전역변수
cal(v1)#전역변수 위에 지역변수랑은 다른값이당
print(v1)

print("-"*50)

def func1():
    global a #전역변수를 가져옴  20짜리 방이 사라지고 원래 100짜리 방에 있던곳에 들어가게된다 
    a=100 #지역변수
    print("func1 a=",a)
    #지역변수 값을 전역변수에 적용 시키는 방법
    #코드를 추가하세여.

#전역변수의 값을 호출 100    
def func2():
    print("func2 b=",a+10)
    
a= 20 #전역변수이다

func1()
func2()
print("결과값 : ",a)
    
    
print("-"*50)

#함수선언
def func1(a,a_list):
    a=100 #지역변수
    a_list[0]=100 #지역변수
    return a

a=10 #전역변수 #한가지 값일때는 리턴을 해준다.
a_list=[1,2,3] #전역변수
#함수호출
a=func1(a,a_list) #2개 이상의 데이터를 저장하는 변수 주소값을 저장함.

#데이터 출력
print(a)
print(a_list)

